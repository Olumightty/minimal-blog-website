<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Reset Password</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 1rem;
    }
    
    .card {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      border-radius: 20px;
      padding: 2.5rem;
      width: 100%;
      max-width: 400px;
      box-shadow: 0 25px 50px rgba(0, 0, 0, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }
    
    .icon {
      background: linear-gradient(45deg, #667eea, #764ba2);
      width: 60px;
      height: 60px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto 1.5rem;
      color: white;
      font-size: 24px;
    }
    
    h2 {
      text-align: center;
      color: #333;
      margin-bottom: 0.5rem;
      font-weight: 600;
    }
    
    .subtitle {
      text-align: center;
      color: #666;
      margin-bottom: 2rem;
      font-size: 14px;
    }
    
    .error-state {
      text-align: center;
      color: #dc3545;
      background: #f8d7da;
      border: 1px solid #f5c6cb;
      border-radius: 12px;
      padding: 1.5rem;
      margin-top: 1rem;
    }
    
    .error-state .icon {
      background: #dc3545;
      margin-bottom: 1rem;
    }
    
    .form-group {
      margin-bottom: 1.5rem;
    }
    
    label {
      display: block;
      margin-bottom: 0.5rem;
      color: #555;
      font-weight: 500;
      font-size: 14px;
    }
    
    input {
      width: 100%;
      padding: 0.875rem 1rem;
      border: 2px solid #e1e5e9;
      border-radius: 12px;
      font-size: 16px;
      transition: all 0.3s ease;
      background: #fafafa;
    }
    
    input:focus {
      outline: none;
      border-color: #667eea;
      background: white;
      box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }
    
    input.invalid {
      border-color: #dc3545;
      background: #fff5f5;
    }
    
    .password-strength {
      margin-top: 0.5rem;
      font-size: 12px;
      color: #666;
    }
    
    .strength-weak { color: #dc3545; }
    .strength-medium { color: #ffc107; }
    .strength-strong { color: #28a745; }
    
    .btn {
      width: 100%;
      padding: 1rem;
      background: linear-gradient(45deg, #667eea, #764ba2);
      color: white;
      border: none;
      border-radius: 12px;
      font-size: 16px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }
    
    .btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
    }
    
    .btn:active {
      transform: translateY(0);
    }
    
    .btn:disabled {
      opacity: 0.7;
      cursor: not-allowed;
      transform: none;
    }
    
    .loading {
      display: none;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
    }
    
    .spinner {
      width: 16px;
      height: 16px;
      border: 2px solid rgba(255, 255, 255, 0.3);
      border-top: 2px solid white;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .message {
      margin-top: 1rem;
      padding: 0.75rem;
      border-radius: 8px;
      text-align: center;
      font-size: 14px;
      font-weight: 500;
      display: none;
    }
    
    .message.success {
      background: #d4edda;
      color: #155724;
      border: 1px solid #c3e6cb;
    }
    
    .message.error {
      background: #f8d7da;
      color: #721c24;
      border: 1px solid #f5c6cb;
    }
    
    .back-link {
      text-align: center;
      margin-top: 1.5rem;
    }
    
    .back-link a {
      color: #667eea;
      text-decoration: none;
      font-size: 14px;
      font-weight: 500;
    }
    
    .back-link a:hover {
      text-decoration: underline;
    }
    
    @media (max-width: 480px) {
      .card {
        padding: 2rem 1.5rem;
      }
    }
  </style>
</head>
<body>
  <div class="card">
    <% if(invalid) { %>
      <div class="error-state">
        <div class="icon">‚ö†Ô∏è</div>
        <h2>Invalid Reset Link</h2>
        <p>This password reset link is invalid or has expired. Please request a new one.</p>
        <div class="back-link">
          <a href="/forgot-password">‚Üê Request New Reset Link</a>
        </div>
      </div>
    <% } %>
    
    <% if (!invalid) { %>
      <div class="icon">üîê</div>
      <h2>Reset Password</h2>
      <p class="subtitle">Create a new secure password for your account</p>
      
      <form id="reset-password-form">
        <div class="form-group">
          <label for="newPassword">New Password</label>
          <input type="password" id="newPassword" name="newPassword" required placeholder="Enter new password" />
          <div id="password-strength" class="password-strength"></div>
        </div>
        
        <div class="form-group">
          <label for="confirmPassword">Confirm New Password</label>
          <input type="password" id="confirmPassword" name="confirmPassword" required placeholder="Confirm new password" />
        </div>
        
        <button type="submit" class="btn">
          <span class="btn-text">Reset Password</span>
          <span class="loading">
            <span class="spinner"></span>
            Resetting...
          </span>
        </button>
      </form>
      
      <div id="message" class="message"></div>
      
      <div class="back-link">
        <a href="/signin">‚Üê Back to Login</a>
      </div>
    <% } %>
  </div>
  
  <%- include('partials/toaster') %>
  
  <script>
    const form = document.getElementById('reset-password-form');
    const messageDiv = document.getElementById('message');
    const btn = form?.querySelector('.btn');
    const btnText = btn?.querySelector('.btn-text');
    const loading = btn?.querySelector('.loading');
    const newPasswordInput = document.getElementById('newPassword');
    const confirmPasswordInput = document.getElementById('confirmPassword');
    const strengthDiv = document.getElementById('password-strength');
    
    // Password strength checker
    function checkPasswordStrength(password) {
      let strength = 0;
      let feedback = '';
      
      if (password.length >= 8) strength++;
      if (/[a-z]/.test(password)) strength++;
      if (/[A-Z]/.test(password)) strength++;
      if (/[0-9]/.test(password)) strength++;
      if (/[^a-zA-Z0-9]/.test(password)) strength++;
      
      switch (strength) {
        case 0:
        case 1:
        case 2:
          feedback = 'Weak password';
          strengthDiv.className = 'password-strength strength-weak';
          break;
        case 3:
        case 4:
          feedback = 'Medium strength';
          strengthDiv.className = 'password-strength strength-medium';
          break;
        case 5:
          feedback = 'Strong password';
          strengthDiv.className = 'password-strength strength-strong';
          break;
      }
      
      strengthDiv.textContent = password.length > 0 ? feedback : '';
    }
    
    // Real-time password validation
    if (newPasswordInput) {
      newPasswordInput.addEventListener('input', (e) => {
        checkPasswordStrength(e.target.value);
      });
      
      confirmPasswordInput.addEventListener('input', (e) => {
        const newPassword = newPasswordInput.value;
        const confirmPassword = e.target.value;
        
        if (confirmPassword && newPassword !== confirmPassword) {
          e.target.classList.add('invalid');
        } else {
          e.target.classList.remove('invalid');
        }
      });
    }
    
    if (form) {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        console.log('Form submitted');
        
        const newPassword = document.getElementById('newPassword').value;
        const confirmPassword = document.getElementById('confirmPassword').value;
        
        if (newPassword !== confirmPassword) {
          messageDiv.textContent = "New passwords do not match.";
          messageDiv.className = 'message error';
          messageDiv.style.display = 'block';
          return;
        }
        
        const resetToken = '<%= token %>';
        if (!resetToken) {
          messageDiv.textContent = "Invalid reset url.";
          messageDiv.className = 'message error';
          messageDiv.style.display = 'block';
          return;
        }
        
        // Show loading state
        btn.disabled = true;
        btnText.style.display = 'none';
        loading.style.display = 'flex';
        messageDiv.style.display = 'none';
        
        try {
          const res = await fetch('/reset-password', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ newPassword, confirmPassword, resetToken })
          });
          
          if (!res.ok) {
            const errorData = await res.json();
            throw new Error(errorData.message || 'Failed to reset password');
          }
          
          const data = await res.json();
          
          if (data.status !== true) throw new Error(data.error);
          
          messageDiv.textContent = data.message || 'Password reset successful!';
          messageDiv.className = 'message success';
          messageDiv.style.display = 'block';
          
          if (typeof showSuccess === 'function') {
            showSuccess(data.message || 'Password reset successful');
          }
          
          setTimeout(() => {
            window.location.href = '/signin';
          }, 2000);
          
        } catch (err) {
          messageDiv.textContent = err.message;
          messageDiv.className = 'message error';
          messageDiv.style.display = 'block';
          
          if (typeof showError === 'function') {
            showError(err.message || 'Failed to reset password');
          }
        } finally {
          // Reset button state
          btn.disabled = false;
          btnText.style.display = 'block';
          loading.style.display = 'none';
        }
      });
    }
  </script>
</body>
</html>